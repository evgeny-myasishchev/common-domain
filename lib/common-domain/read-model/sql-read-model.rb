module CommonDomain::ReadModel
  class SqlReadModel < Base
    autoload :DatasetsRegistry, 'common-domain/read-model/sql-read-model/datasets-registry'
    autoload :Schema, 'common-domain/read-model/sql-read-model/schema'
    
    Log = CommonDomain::Logger.get "common-domain::read-model::sql-read-model"
    
    class InvalidStateError < ::StandardError
    end
    
    attr_reader :connection, :registry
    
    def initialize(connection, options = {})
      @options = {
      }.merge! options
      @connection = connection
      @registry   = schema.datasets_registry
      prepare_statements(@registry)
    end
    
    def setup
      if schema.meta_store_initialized? && schema.actual_schema_version != 0
        raise InvalidStateError.new "Looks like schema has already been initialized. Please rebuild your read model instead."
      end
      schema.setup
    end
    
    def cleanup!
      Log.warn "Read-model schema cleanup..."
      schema.cleanup
    end
    
    def rebuild_required?
      schema.rebuild_required?
    end
    
    def setup_required?
      schema.setup_required?
    end
    
    def schema
      #Runtime generated by self.setup_schema
    end   
    
    protected
      def prepare_statements(registry)
        #Runtime generated by self.prepare_statements
      end
    
    class << self
      # &block to be called with schema
      def setup_schema(options = {}, &block)
        define_method(:schema) do
          options = { identifier: self.class.name }.merge! options
          @schema ||= Schema.new(@connection, options) do |s|
            __setup_schema__(s)
          end
        end
        define_method(:__setup_schema__, &block)
        private :__setup_schema__
      end
      
      # &block to be called with DatasetsRegistry instance
      def prepare_statements(&block)
        define_method(:prepare_statements, block)
        protected :prepare_statements
      end
    end
  end
end
